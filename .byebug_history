c
params
c
params
c
params
c
User.last
c
user_params
c
params
rec_messages
c
messages = User.find_by_email(params['email']).messages
u.messages
u = User.find_by_email(params['email'])
c
messages.relations
messages
messages.messages
messages.contactings
messages.contacting
messages.messages.all
messages.messages
messages = User.find_by_email(params['email'])
messages = User.find_by_email(params['email']).messages
c
u.contactings.all
u.email
 u = User.find_by_email(params[:email])
c
 u = User.find_by_email(params[:email])
c
@msg.picture == "null"
@msg.picture
@msg.picture == null
@msg.picture = null
!@msg.picture
If (!@msg.picture) puts "hi" end
If (@msg.picture) puts "hi" end
@msg.picture
@msg
c
step
--help
-h
c
@msg.user.username
@msg.user
@msg
c
@msg.user_id
@msg.user
@msg
c
Message.last
c
params
Message.last
message
c
Message.all
c
message
c
a.address params[:coords]
params
a.address 12 -12
a.methods
a
a = Geocoder
Geocoder.all
Geocoder
geocode
geo = Geocoder.new
Geocoder
geocode 29.951,-90.081
reverse_geocoded_by 49, -123
params
c
params
c
user
c
user
Contacting.last
c
params
params[:nickname]
Contacting.last
user
c
u
User.last
params
con
c
u
c
contacts  = u.contactings.first.contact.email
contacts  = u.contactings.first.contact
contacts  = u.contactings.last.contact
contacts  = u.contactings.last
contacts  = u.contactings.map{|c| c.nickname}
contacts  = u.contactings.map{|c| puts c.nickname}
contacts  = u.contactings.map{|c| [puts c.nickname]}
contacts  = u.contactings.map{|c| [putst c.nickname]}
contacts  = u.contactings.map{|c| [c.nickname, c.contact]}
c
contacts  = u.contactings.map{|c| [c.nickname, c.contact]}
contacts  = u.contactings.map{|c| [c.nickname, c.contact.email]}
u.contactings.first.contact.email
u.contactings.first.contact
u.contactings
contacts  = u.contactings.map{|c| [c.nickname, c.contact.email]}
contacts  = u.contactings.map{|c| [c.nickname, c.contact]}
contacts  = u.contactings.map{|c| [c.nickname]}
contacts  = u.contactings.map{|c| [c.nickname, c.contact.email]}
u.contactings.all contacts  = u.contactings.map{|c| [c.nickname, c.contact.email]}
u.contactings.all
u
params
c
User.last
c
u.errors.full_messages
u
User.last
c
u.errors.full_messages
u.save
params
u
User.last
c
params
User.last
u
c
User.last
u
User.last
User.all
User.last
c
u.errors.full_messages
u.errors
u.error
c
User.last
params
c
u
end
  memo[x] = f(x)
t = [1, 2, 3, 4].each_with_object({}) do |x, memo|
u.contactings.each do |c| puts c.nickname end
u.contactings
u.contactings.each do |c| puts c.nickname end
u.contactings.each do |c| c.nickname end
u.contactings.each do |c| ['c.nickname'] = c.contact_id.email end
u.contactings.map {|c| ['c.nickname'] = c.contact_id.email}
u.contactings.map {|c| {c.nickname: c.contact_id.email}}
u.contactings.each {|c| c.nickname}
u.contactings
u.contactings.nickname
u.contactings
u.contacttings
u.contacts
u
user
c
user.contacts.ceach {|c| c.nickname}
user.contacts.each {|c| c.nickname}
user
user.contacts
user.contactings.all
user.contactings
user
user.contactings.map do |c| c.nickname end
user.contactings.map do |c| c.contactings end
user.contactings.map do |c| {c.nickname:, 'hi'} end
user.contactings.map do |c| {"c.nickname", 'hi'}
user.contactings.map do |c| {c.nickname: 'hi'}
user.contactings.each do |c| {c.nickname: 'hi'}
user.contactings.each do |c| c.nickname: name
user.contacts
user
c
a = {user: user.username, email: user.email, contactNickname: user.contacts.map{|c| c.email}, contactNickname: user.contacts.map{|c|c c.email}}
a = {user: user.username, email: user.email, contacts: user.contacts.map{|c| c.email}}
a = {user: user.username}
a = {}
u
u[:contacts] = user.contacts.each do |c| c.email end
u << user
u = {}
user >> u = {}
user.type
user
c
user
c
user
user.errors
error
json
c
!user.persisted?
user.persisted?
user.errors.full_messages
c
User.last
user.errors.full_messages
user.errors.fullmessages
c
user.errors
c
u = User.last
User.all
params
password
c
user.errors.full_messages.join(" ")
user.errors.full_messages
user.errors.messages.email.all
user.errors.messages[0]
user.errors.messages
user.errors.messages.email
user.errors.messages.toString
user.errors.messages.all
user.errors.messages
user.errors.User_id
user.errors{'email'}
user.errors.email
user.errors
c
user.errors[1]
user.errors[0]
user.errors
c
user.errors
user
c
User.last.errors
User
User.errors.all
User.error
User.errors
c
params
